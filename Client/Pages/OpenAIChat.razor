@page "/openaichat"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components.Forms
@using openaidemo_webapp.Client.Components.ChatBubble
@using openaidemo_webapp.Shared
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@using MudBlazor

<PageTitle>Azure OpenAI Chat</PageTitle>

<MudGrid Class="chat-container">
    <MudItem xs="4" Class="chat-header">
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" @onclick="HandleClearChat" Class="clear-chat-button">Clear</MudButton>
    </MudItem>
    <MudItem xs="4" Class="chat-header text-center">
        <h3>Chat</h3>
    </MudItem>
    <MudItem xs="4" Class="chat-header">
    </MudItem>

    <MudItem xs="12" Class="chat-messages-container">
        <div id="messages" class="chat-window row" @ref="messagesDiv">
            <div class="chat-message" style="margin-bottom: 10px;">

                @foreach (var message in chatMessages)
                {
                    <ChatBubble Message="message" />
                }

            </div>
        </div>
    </MudItem>

    <MudItem xs="12" Class="chat-input-container">
        <EditForm Model="chatInput" OnValidSubmit="SendQuery" class="chat-input-form">
            <div class="input-group" style="margin-top: 10px;">
                <InputText id="query" class="form-control" @bind-Value="chatInput.Query" @onkeydown="HandleKeyDown"  />
                <button type="submit" class="btn btn-primary"><i class="fas fa-paper-plane"></i> </button>
            </div>
        </EditForm>
    </MudItem>
        
</MudGrid>

@code {

    private HubConnection? hubConnection;
    private ChatInput chatInput = new ChatInput() { Query = ""};
    private List<OpenAIChatMessage> chatMessages = new List<OpenAIChatMessage>();
    private ElementReference messagesDiv;
    private Boolean clippyMode = false;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
        .WithAutomaticReconnect()
        .Build();

        hubConnection.On<string, string, string>("ReceiveMessage", async (responseGuid, user, message) =>
        {
            if (clippyMode == true)
            {
                await JS.InvokeVoidAsync("clippySpeak", message);
                chatInput.Query = string.Empty;
            }

            /*
            var encodedMsg = $"{user}: {message}";
            chatMessages.Add(new ChatBubbleMessage { ChatBubbleId =  new Guid().ToString(), Content = message, Type = "ai" });
            chatInput.Query = string.Empty;
            StateHasChanged();
            */

        });

        hubConnection.On < string, string, string, bool> ("ReceiveMessageToken", async (chatBubbleId, user, messageToken, isTemporaryResponse) =>
        {
            if (clippyMode == false)
            {
                // Find the chat message with the supplied chatBubbleId
                var chatMessage = chatMessages.Where(chatMessageItem => chatMessageItem.ChatBubbleId == chatBubbleId).FirstOrDefault();

                if (chatMessage != null)
                {
                    if (chatMessage.IsTemporaryResponse)
                    {
                        chatMessage.Content = "";
                        chatMessage.IsTemporaryResponse = false;
                    }

                    chatMessage.Content = chatMessage.Content + messageToken;
                }
                else
                {
                    chatMessages.Add(new OpenAIChatMessage { ChatBubbleId = chatBubbleId, Content = messageToken, Type = "ai", IsTemporaryResponse = isTemporaryResponse });
                }

                await JS.InvokeVoidAsync("scrollToBottom", "messages");

                chatInput.Query = string.Empty;
            }

            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    public bool IsConnected => (hubConnection?.State ?? HubConnectionState.Disconnected) == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private async Task SendQuery()
    {

        String prompt_prexix = "";

        if (!string.IsNullOrWhiteSpace(chatInput.Query))
        {

            if (chatInput.Query.ToLower().Contains("clippy") && clippyMode == false)
            {
                clippyMode = true;
                await JS.InvokeVoidAsync("showClippy", "Clippy");                
            }

            String chatMessageGuid = System.Guid.NewGuid().ToString();

            chatMessages.Add(new OpenAIChatMessage {ChatBubbleId = chatMessageGuid,  Content = chatInput.Query, Type = "human" });
            await JS.InvokeVoidAsync("scrollToBottom", "messages");

            if (clippyMode == true)
            {
                prompt_prexix = "Pretend to be Clippy the Office helper and answer the following query: ";
            }

            if (hubConnection != null)
            {
                await hubConnection.SendAsync("SendQuery", prompt_prexix + chatInput.Query, chatMessages);
            }

        }
    }  

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        // if (e.Key == "Enter")
        // {
        //     await SendQuery();
        // }
    }

    public class ChatInput
    {
        public required string Query { get; set; }
    }

    //
    // Clear the Chat Window
    //
    private void HandleClearChat()
    {
        chatMessages.Clear();
    }

}
