@page "/openaicogsearch"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components.Forms
@using openaidemo_webapp.Client.Components.ChatBubble
@using openaidemo_webapp.Client.Components.Sources
@using openaidemo_webapp.Client.Components.SearchFilters
@using openaidemo_webapp.Shared
@using System.Net.Http
@using System.Net.Http.Json
@using MudBlazor

@inject HttpClient Http

@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<PageTitle>Azure OpenAI Cognitive Search</PageTitle>

<div class="main-container container">
    
    <div class="options-container row container">
        <MudExpansionPanels Elevation="2" Rounded="true" MultiExpansion="false" class="">
            <MudExpansionPanel Text="Upload Files">
                <div class="file-upload-row row">
                    <MudFileUpload T="IReadOnlyList<IBrowserFile>" Accept=".pdf" FilesChanged="UploadFiles">
                        <ButtonTemplate>
                            <MudButton HtmlTag="label"
                                       Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.CloudUpload"
                                       for="@context">
                                Upload Documents
                            </MudButton>
                        </ButtonTemplate>
                    </MudFileUpload>
                </div>
                <div class="extraction-results-row row">
                    @if (extractionResults != null)
                    {
                        <MudList>
                            @foreach (var extractionResult in extractionResults)
                            {
                                <MudExpansionPanel Icon="@Icons.Material.Filled.AttachFile" Text="@extractionResult.FileName">
                                    <ChildContent>
                                        <MudList>
                                            @foreach (var extractedParagraph in extractionResult.ExtractedParagraphs)
                                            {
                                                <MudListItem>
                                                    <MudCard>
                                                        <MudCardContent class="extraction-results">
                                                            <MudText Typo="Typo.h6">@extractedParagraph.Title</MudText>
                                                            <MudText><code>@extractedParagraph.Content</code></MudText>
                                                        </MudCardContent>
                                                    </MudCard>
                                                </MudListItem>
                                            }
                                        </MudList>
                                    </ChildContent>
                                </MudExpansionPanel>
                            }
                        </MudList>
                    }
                </div>
            </MudExpansionPanel>
            <MudExpansionPanel Text="Filters">
                <SearchFilters CompanyItems="Companies"
                               YearItems="Years"
                               SelectedCompanyChanged="OnSelectedCompanyChanged"
                               SelectedYearChanged="OnSelectedYearChanged"
                               isLoading="isLoadingFilters">
                </SearchFilters>
            </MudExpansionPanel>
            <MudExpansionPanel Text="Options">
                <MudCheckBox @bind-Checked="includePreviousMessages" Class="include-previous-messages">Include Previous Messages</MudCheckBox>
            </MudExpansionPanel>
        </MudExpansionPanels>
    </div>

    <MudGrid Class="cognitive-chat-container">
        <MudItem xs="2" Class="chat-header">
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" @onclick="HandleClearChat">Clear Chat</MudButton>
        </MudItem>
        <MudItem xs="6" Class="chat-header text-center">
            <h3>Chat</h3>
        </MudItem>
        <MudItem xs="4" Class="chat-header text-center">
            <h3>Sources</h3>
        </MudItem>
        
        <MudItem xs="12" Class="cognitive-chat-controls-container">

            <MudGrid Class="cognitive-chat-message-controls-container">
                <MudItem xs="8" Class="cognitive-chat-messages-input-item">

                    <MudGrid Class="cognitive-chat-messages-input-container">

                        <MudItem xs="12" Class="cognitive-chat-messages-container">
                            <div id="messages" class="chat-window row" @ref="messagesDiv">
                                <div class="chat-message" style="margin-bottom: 10px;">

                                    @foreach (var message in chatMessages)
                                    {
                                        <ChatBubble Message="message" />
                                    }

                                </div>
                            </div>
                        </MudItem>

                        <MudItem xs="12" Class="cognitive-chat-input-container">
                            <EditForm Model="chatInput" OnValidSubmit="SendCogServiceQuery" class="chat-input-form">
                                <div class="input-group" style="margin-top: 10px;">
                                    <InputText id="query" class="form-control" @bind-Value="chatInput.Query" @onkeydown="HandleKeyDown" />
                                    <button type="submit" class="btn btn-primary"><i class="fas fa-paper-plane"></i> </button>
                                </div>
                            </EditForm>
                        </MudItem>

                    </MudGrid>

                </MudItem>

                <MudItem xs="4" Class="cognitive-chat-sources-container">
                    <div class="sources-column">
                        <Sources SourcesItems="cognitiveSearchResults" isLoading="isLoadingSources" />
                    </div>
                </MudItem>

            </MudGrid>

        </MudItem>        

    </MudGrid>

</div>


@code {

    private HubConnection hubConnection;
    private ChatInput chatInput = new ChatInput();
    private List<OpenAIChatMessage> chatMessages = new List<OpenAIChatMessage>();
    private ElementReference messagesDiv;
    IList<IBrowserFile> uploadedFiles = new List<IBrowserFile>();
    private List<ExtractionResult> extractionResults = new List<ExtractionResult>();
    List<CognitiveSearchResult> cognitiveSearchResults = new List<CognitiveSearchResult>();
    List<CognitiveSearchFacet> cognitiveSearchFacetResults = new List<CognitiveSearchFacet>();
    private bool isLoadingSources = false;
    private bool isLoadingFilters = false;

    // Filters
    private string SelectedCompany { get; set; } = "";
    private string SelectedYear { get; set; } = "";
    private List<String> Companies { get; set; } = new List<string>();
    private List<String> Years { get; set; } = new List<String>();
    private bool includePreviousMessages = true;

    //
    // Initialise the SignalR connection when the page loads
    //
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
        .WithAutomaticReconnect()
        .Build();

        //
        // An OpenAI Message Token has been received
        //
        hubConnection.On < string, string, string, bool> ("ReceiveMessageToken", async (chatBubbleId, user, messageToken, isTemporaryResponse) =>
        {
            // Find the chat message with the supplied chatBubbleId
            var chatMessage = chatMessages.Where(chatMessageItem => chatMessageItem.ChatBubbleId == chatBubbleId).FirstOrDefault();

            if (chatMessage != null)
            {
                if (chatMessage.IsTemporaryResponse)
                {
                    chatMessage.Content = "";
                    chatMessage.IsTemporaryResponse = false;
                }

                chatMessage.Content = chatMessage.Content + messageToken;
            }
            else
            {
                chatMessages.Add(new OpenAIChatMessage { ChatBubbleId = chatBubbleId, Content = messageToken, Type = "ai", IsTemporaryResponse = isTemporaryResponse });
            }

            await JS.InvokeVoidAsync("scrollToBottom", "messages");

            chatInput.Query = string.Empty;
            StateHasChanged();
        });

        //
        // The Cognitive Search results have been received
        //
        hubConnection.On<CognitiveSearchResults>("CognitiveSearchResults", (cogSearchResults) =>
        {
            isLoadingSources = false;
            cognitiveSearchResults = (List<CognitiveSearchResult>)cogSearchResults.CognitiveSearchResultList;
            StateHasChanged();
        });

        //
        // Receive all of the Cognitive Search Facets
        //
        hubConnection.On<CognitiveSearchFacets>("CognitiveSearchFacetResults", (cogSearchFacetResults) =>
        {
            cognitiveSearchFacetResults = (List<CognitiveSearchFacet>)cogSearchFacetResults.CognitiveSearchFacetList;

            //
            // Fill the companies dropdown
            //
            CognitiveSearchFacet companyFacet = cognitiveSearchFacetResults.Find(f => f.facetName == "company");

            if (companyFacet != null)
            {
                // Iterate through the cognitiveSearchFacetResults and add the facetResultName to Companies list
                foreach (CognitiveSearchFacetResult result in companyFacet.cognitiveSearchFacetResults)
                {
                    Companies.Add(result.facetResultName);
                }
            }

            Companies.Sort();
            SelectedCompany = "";

            //
            // Fill the Years dropdown
            //
            CognitiveSearchFacet yearFacet = cognitiveSearchFacetResults.Find(f => f.facetName == "year");

            if (yearFacet != null)
            {
                // Iterate through the cognitiveSearchFacetResults and add the facetResultName to Years list
                foreach (CognitiveSearchFacetResult result in yearFacet.cognitiveSearchFacetResults)
                {
                    Years.Add(result.facetResultName);
                }
            }

            Years.Sort();
            SelectedYear = "";

            isLoadingFilters = false;
            StateHasChanged();
        });

        //
        // Connect to the SignalR Hub
        //
        await hubConnection.StartAsync();

        //
        // Fill all of the Filter Facets
        //
        GetFilters();

    }

    //
    // Track if we're still connected to the SignalR hub
    //
    public bool IsConnected =>
    hubConnection.State == HubConnectionState.Connected;

    //
    // Close the connection to the SignalR Hub when the page is closed
    //
    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }

    //
    // The Selected Company Filter has Changed
    //
    private void OnSelectedCompanyChanged(string company)
    {
        SelectedCompany = company;
    }

    //
    // The Selected Year Filter has Changed
    //
    private void OnSelectedYearChanged(string year)
    {
        SelectedYear = year;
    }

    //
    // Get the Search Filters
    //
    private async Task GetFilters()
    {
        isLoadingFilters = true;
        await hubConnection.SendAsync("GetCogServiceFacets", "");
    }

    //
    // Send a Cognitive Search Query
    //
    private async Task SendCogServiceQuery()
    {
        if (!string.IsNullOrWhiteSpace(chatInput.Query))
        {
            cognitiveSearchResults = new List<CognitiveSearchResult>();
            isLoadingSources = true;
            String chatMessageGuid = System.Guid.NewGuid().ToString();

            List<OpenAIChatMessage> previousMessages = new List<OpenAIChatMessage>();
            previousMessages.AddRange(chatMessages);

            chatMessages.Add(new OpenAIChatMessage {ChatBubbleId = chatMessageGuid,  Content = chatInput.Query, Type = "human" });
            await JS.InvokeVoidAsync("scrollToBottom", "messages");
            await hubConnection.SendAsync("SendCogServiceQuery", chatInput.Query, includePreviousMessages ? previousMessages : new List<OpenAIChatMessage>(), SelectedCompany, SelectedYear);
        }
    }  

    //
    // Handle the Enter key being pressed and send a query
    //
    // (Unused: Handled by markup)
    //
    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        // if (e.Key == "Enter")
        // {
        //     await SendQuery();
        // }
    }

    //
    // Clear the Chat Window
    //
    private async Task HandleClearChat()
    {
        chatMessages.Clear();
        cognitiveSearchResults.Clear();
    }

    //
    // Upload the selected files to the Server for processing and ingress into Cognitive Search.
    //
    private async void UploadFiles(IReadOnlyList<IBrowserFile> files)
    {
        foreach (var file in files)
        {
            using (var originalStream = file.OpenReadStream(maxAllowedSize: 5000000))
            using (var memoryStream = new MemoryStream())
            {
                await originalStream.CopyToAsync(memoryStream);
                // Call the Blazor Server backend to upload the file
                ExtractionResult extractionResult = await UploadFileToServer(memoryStream, file.Name, file.ContentType);
                extractionResults.Add(extractionResult);

                uploadedFiles.Add(file);
                StateHasChanged();
            }
        }

        Console.WriteLine("File Upload Complete");
    }

    //
    // Upload a file to the Server
    //
    private async Task<ExtractionResult> UploadFileToServer(Stream stream, string fileName, string contentType)
    {

        try
        {
            var content = new MultipartFormDataContent();
            stream.Position = 0; // Reset the stream position to the beginning
            content.Add(new StreamContent(stream), "file", fileName);

            var response = await Http.PostAsync("api/FileUpload", content);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ExtractionResult>();
                return result;
            }
            else
            {
                throw new ApplicationException($"Error uploading file: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            throw;
        }

    }

    //
    // The Uploaded File Class
    //
    public class UploadedFile
    {
        public string FileName { get; set; }
        public string ContentType { get; set; }
        // Add any other properties needed to represent the uploaded file
    }

    //
    // Chat input class
    //
    public class ChatInput
    {
        public string Query { get; set; }
    }

}
