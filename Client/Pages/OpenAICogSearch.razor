@page "/openaicogsearch"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components.Forms
@using openaidemo_webapp.Client.Components.ChatBubble
@using openaidemo_webapp.Shared
@using System.Net.Http
@using System.Net.Http.Json
@using MudBlazor

@inject HttpClient Http

@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<PageTitle>Azure OpenAI Cognitive Search</PageTitle>

<div class="file-upload-container">
    <h1>Upload Files for Indexing</h1>
    <MudFileUpload T="IReadOnlyList<IBrowserFile>" FilesChanged="UploadFiles">
    <ButtonTemplate>
        <MudButton HtmlTag="label"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.CloudUpload"
                   for="@context">
            Multiple Files
        </MudButton>
    </ButtonTemplate>
</MudFileUpload>
</div>

<div class="chat-container">
    <h1>Azure OpenAI Cognitive Search</h1>
    <div class="chat-column">
        <div id="messages" class="chat-window" @ref="messagesDiv">
            <div class="chat-message" style="margin-bottom: 10px;">

                @foreach (var message in chatMessages)
                {
                    <ChatBubble Message="message" />
                }

            </div>
        </div>

        <EditForm Model="chatInput" OnValidSubmit="SendQuery">
            <div class="input-group" style="margin-top: 10px;">
                <InputText id="query" class="form-control" @bind-Value="chatInput.Query" @onkeydown="HandleKeyDown" />
                <button type="submit" class="btn btn-primary"><i class="fas fa-paper-plane"></i> </button>
            </div>
        </EditForm>

    </div>
    <div class="sources-column">
        <h3>Sources</h3>

    </div>
</div>

@code {

    private HubConnection hubConnection;
    private ChatInput chatInput = new ChatInput();
    private List<OpenAIChatMessage> chatMessages = new List<OpenAIChatMessage>();
    private ElementReference messagesDiv;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
        .WithAutomaticReconnect()
        .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            /*
            var encodedMsg = $"{user}: {message}";
            chatMessages.Add(new ChatBubbleMessage { ChatBubbleId =  new Guid().ToString(), Content = message, Type = "ai" });
            chatInput.Query = string.Empty;
            StateHasChanged();
            */

        });

        hubConnection.On < string, string, string, bool> ("ReceiveMessageToken", async (chatBubbleId, user, messageToken, isTemporaryResponse) =>
        {
            // Find the chat message with the supplied chatBubbleId
            var chatMessage = chatMessages.Where(chatMessageItem => chatMessageItem.ChatBubbleId == chatBubbleId).FirstOrDefault();

            if (chatMessage != null)
            {
                if (chatMessage.IsTemporaryResponse)
                {
                    chatMessage.Content = "";
                    chatMessage.IsTemporaryResponse = false;
                }

                chatMessage.Content = chatMessage.Content + messageToken;
            }
            else
            {
                chatMessages.Add(new OpenAIChatMessage { ChatBubbleId = chatBubbleId, Content = messageToken, Type = "ai", IsTemporaryResponse = isTemporaryResponse });
            }

            await JS.InvokeVoidAsync("scrollToBottom", "messages");

            chatInput.Query = string.Empty;
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    public bool IsConnected =>
    hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }

    private async Task SendQuery()
    {
        if (!string.IsNullOrWhiteSpace(chatInput.Query))
        {
            String chatMessageGuid = System.Guid.NewGuid().ToString();

            chatMessages.Add(new OpenAIChatMessage {ChatBubbleId = chatMessageGuid,  Content = chatInput.Query, Type = "human" });
            await JS.InvokeVoidAsync("scrollToBottom", "messages");
            await hubConnection.SendAsync("SendMessage", "human", chatInput.Query);
        }
    }  

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        // if (e.Key == "Enter")
        // {
        //     await SendQuery();
        // }
    }

    IList<IBrowserFile> uploadedFiles = new List<IBrowserFile>();
    private async void UploadFiles(IReadOnlyList<IBrowserFile> files)
    {
        foreach (var file in files)
        {
            using (var originalStream = file.OpenReadStream())
            using (var memoryStream = new MemoryStream())
            {
                await originalStream.CopyToAsync(memoryStream);
                // Call the Blazor Server backend to upload the file
                var uploadedFile = await UploadFileToServer(memoryStream, file.Name, file.ContentType);
                uploadedFiles.Add(file);
            }
        }
    }

    private async Task<UploadedFile> UploadFileToServer(Stream stream, string fileName, string contentType)
    {

        try
        {
            var content = new MultipartFormDataContent();
            stream.Position = 0; // Reset the stream position to the beginning
            content.Add(new StreamContent(stream), "file", fileName);

            var response = await Http.PostAsync("api/FileUpload", content);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<UploadedFile>();
                return result;
            }
            else
            {
                throw new ApplicationException($"Error uploading file: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            throw;
        }
    
    }

    public class UploadedFile
    {
        public string FileName { get; set; }
        public string ContentType { get; set; }
        // Add any other properties needed to represent the uploaded file
    }

    public class ChatInput
    {
        public string Query { get; set; }
    }





}
