@using System.Text.RegularExpressions;
@using openaidemo_webapp.Shared
@using MudBlazor
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService

<div class="@chatBubbleStyle">
    @if (Message.IsTemporaryResponse)
    {
        <div class="@typingStyle">
            <span>.</span>
            <span>.</span>
            <span>.</span>
        </div>
    }
    else
    {
        @foreach (var item in ParseContent(Message.Content))
        {
            if (item.isCode)
            {
                if (item.isInlineCode)
                {
                    <code>@item.content</code>
                }
                else
                {
                    <div class="codeSnippetContainer">
                        <pre class="codeSnippet">@item.content</pre>
                        <button class="btn btn-sm btn-outline-secondary copyButton" @onclick="() => CopyToClipboard(item.content)">Copy</button>
                    </div>
                }
            }
            else
            {
                <span>@(new MarkupString(item.content))</span>
            }


        }

       @if (Message.Sources != null && Message.Sources.Count > 0)
        {
            <div class="chatBubbleCitations">
                <hr/>
                <div class="chatBubbleCitationsHeader">Citations:</div>
                @foreach (var source in GetDocSources())
                {
                    var docNumber = Message.Sources.IndexOf(source) + 1;
                    var tooltipText = $"Source {docNumber} - {source.Id}";

                    <MudTooltip ShowOnHover class="citation">
                        <ChildContent class="citationHeader">
                            <MudText>Doc @docNumber</MudText>
                        </ChildContent>
                        <TooltipContent class="citationContent">
                            <MudText>@(source.Content.Length > 1000 ? source.Content.Substring(0, 1000) + "..." : source.Content)</MudText>
                        </TooltipContent>
                    </MudTooltip>
                    

                }
            </div>
        }

    }
</div>

@code {
    [Parameter]
    public OpenAIChatMessage Message { get; set; } = new OpenAIChatMessage();

    private string chatBubbleStyle => $"chatBubbleStyle {Message.Type}";
    private string typingStyle => "typing";

    private bool shouldRender = true;

    // Get a filtered list of Message.Sources based on finding the word "DOC " and the source index
    private List<CognitiveSearchResult> GetDocSources()
    {

        Console.WriteLine("GetDocSources");

        List<CognitiveSearchResult> docSources = new List<CognitiveSearchResult>();

        if (Message.Sources != null)
        {
            foreach (var source in Message.Sources)
            {
                if (Message.Content.Contains("DOC " + source.Id))
                {
                    docSources.Add(source);
                }
            }
        }  
        
        Console.WriteLine("docSources.Count: " + docSources.Count);

        return docSources;
    }

    protected override bool ShouldRender()
    {
        return shouldRender;
    }

    private List<(string content, bool isCode, bool isInlineCode)> ParseContent(string content)
    {
        List<(string content, bool isCode, bool isInlineCode)> parsedContent = new List<(string content, bool isCode, bool isInlineCode)>();

        var regex = new Regex(@"(`{1,3})");
        var matches = regex.Matches(content);

        if (matches.Count > 0)
        {
            int currentIndex = 0;
            bool inCodeBlock = false;
            bool isInlineCode = false;

            foreach (Match match in matches)
            {
                if (!inCodeBlock)
                {
                    if (match.Index > currentIndex)
                    {
                        parsedContent.Add((content.Substring(currentIndex, match.Index - currentIndex), false, false));
                    }

                    currentIndex = match.Index + match.Length;
                    isInlineCode = match.Value.Length == 1;
                    inCodeBlock = true;
                }
                else
                {
                    parsedContent.Add((content.Substring(currentIndex, match.Index - currentIndex), true, isInlineCode));
                    currentIndex = match.Index + match.Length;
                    inCodeBlock = false;
                }
            }

            if (currentIndex < content.Length)
            {
                parsedContent.Add((content.Substring(currentIndex), inCodeBlock, isInlineCode));
            }
        }
        else
        {
            parsedContent.Add((content, false, false));
        }

        return parsedContent;
    }


    private async Task CopyToClipboard(string text)
    {
        await JSRuntime.InvokeVoidAsync("copyToClipboard", text);
    }
}
